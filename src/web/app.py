from flask import Flask, render_template, request, jsonify, session, send_from_directory, url_for
from flask_cors import CORS
import os
from datetime import datetime
import logging
from docx import Document
from docx.shared import Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH
from openai import AzureOpenAI
from dotenv import load_dotenv
import json
import time

# Configurar logging
logging.basicConfig(level=logging.INFO)  # Cambiar a INFO para producci√≥n
logger = logging.getLogger(__name__)

# Cargar variables de entorno
load_dotenv()

app = Flask(__name__, static_folder='static')
CORS(app)  # Habilitar CORS para todos los endpoints

# Configurar clave secreta desde variable de entorno o usar una por defecto
app.secret_key = os.getenv('SECRET_KEY', 'idec_secret_key_change_in_production')

# Asegurarse de que el directorio de documentos existe
DOCUMENTS_DIR = os.path.join(app.static_folder, 'documents')
os.makedirs(DOCUMENTS_DIR, exist_ok=True)

# Configurar Azure OpenAI Client
client = AzureOpenAI(
    api_key=os.getenv('OPENAI_API_KEY'),
    api_version=os.getenv('OPENAI_API_VERSION', '2024-02-15-preview'),
    azure_endpoint=os.getenv('OPENAI_API_BASE')
)

# Obtener el ID del asistente existente
ASSISTANT_ID = os.getenv('ASSISTANT_ID')

# Validar que las variables de entorno est√©n configuradas
if not os.getenv('OPENAI_API_KEY'):
    raise ValueError("OPENAI_API_KEY no est√° configurada en el archivo .env")
if not os.getenv('OPENAI_API_BASE'):
    raise ValueError("OPENAI_API_BASE no est√° configurada en el archivo .env")
if not ASSISTANT_ID:
    raise ValueError("ASSISTANT_ID no est√° configurada en el archivo .env")

# Definir el nuevo flujo de conversaci√≥n MGA/IDEC/IA
conversation_flow = {
    'welcome_message': {
        'prompt': '''üëã ¬°Hola! Soy tu asistente virtual para ayudarte en la formulaci√≥n de proyectos de inversi√≥n relacionados con Infraestructura de Datos (IDEC) o Inteligencia Artificial (IA). Vamos a empezar paso a paso.

Te acompa√±ar√© paso a paso para estructurar tu proyecto conforme a la Metodolog√≠a General Ajustada (MGA) del Departamento Nacional de Planeaci√≥n, incorporando los enfoques t√©cnicos y estrat√©gicos de las gu√≠as de Infraestructura de datos del Estado Colombiano (IDEC) e Inteligencia artificial.

üß∞ A lo largo del proceso, te har√© preguntas que nos permitir√°n construir los elementos clave del proyecto: desde la definici√≥n del problema, identificaci√≥n de causas y objetivos (√°rboles de problema), hasta la justificaci√≥n, la poblaci√≥n beneficiaria, y el desarrollo de objetivos, cadena de valor, indicadores, presupuesto, cronograma y dem√°s componentes t√©cnicos.

‚ùì ¬øTienes dudas generales antes de empezar?

Antes de continuar, me gustar√≠a saber si tienes claridad sobre el proceso general de formulaci√≥n de proyectos. Si lo necesitas, puedo explicarte brevemente en qu√© consiste cada fase del ciclo de inversi√≥n p√∫blica:

Por favor, selecciona una opci√≥n:''',
        'options': [
            'S√≠, entiendo el proceso y deseo continuar',
            'No del todo, me gustar√≠a una breve explicaci√≥n',
            'Tengo dudas puntuales sobre los lineamientos del Plan Nacional de Infraestructura de Datos (PNID) o del CONPES 4144 de Inteligencia Artificial'
        ],
        'next_step': 'handle_welcome_choice'
    },
    'cycle_question': {
        'prompt': '''¬øConoces el ciclo de inversi√≥n p√∫blica y las fases que lo componen?''',
        'options': [
            'S√≠, lo conozco',
            'No, me gustar√≠a entenderlo mejor'
        ],
        'next_step': 'handle_cycle_choice'
    },
    'cycle_explanation': {
        'prompt': '''No te preocupes. El ciclo de inversi√≥n p√∫blica incluye las siguientes etapas:

‚Ä¢ Identificaci√≥n del problema u oportunidad de mejora
‚Ä¢ Formulaci√≥n de alternativas y estructuraci√≥n t√©cnica y financiera
‚Ä¢ Evaluaci√≥n y viabilidad del proyecto
‚Ä¢ Registro en el Banco de Programas y Proyectos (BPIN)
‚Ä¢ Implementaci√≥n, seguimiento y evaluaci√≥n

üìò Puedes conocer m√°s en la Gu√≠a MGA del DNP

¬øEst√°s listo para comenzar con la formulaci√≥n de tu proyecto?''',
        'options': [
            'S√≠, comenzar con la formulaci√≥n'
        ],
        'next_step': 'start_formulation'
    },
    'brief_explanation': {
        'prompt': '''üìã **Breve explicaci√≥n del ciclo de inversi√≥n p√∫blica:**

El ciclo de inversi√≥n p√∫blica consta de las siguientes fases principales:

1. **Pre-inversi√≥n**: Identificaci√≥n, preparaci√≥n y evaluaci√≥n del proyecto
2. **Inversi√≥n**: Ejecuci√≥n del proyecto
3. **Operaci√≥n**: Funcionamiento y mantenimiento del proyecto

En la fase de **Pre-inversi√≥n** (donde nos enfocaremos), seguiremos la Metodolog√≠a General Ajustada (MGA) que incluye:

‚Ä¢ **Identificaci√≥n**: Definir el problema y sus causas
‚Ä¢ **Preparaci√≥n**: Formular alternativas de soluci√≥n
‚Ä¢ **Evaluaci√≥n**: Analizar viabilidad t√©cnica, financiera y social

Para proyectos IDEC/IA, incorporaremos elementos espec√≠ficos como:
- Arquitectura de datos
- Interoperabilidad
- Seguridad y privacidad
- Gobernanza de datos
- Componentes de IA

¬øEst√°s listo para comenzar con la formulaci√≥n de tu proyecto?''',
        'options': [
            'S√≠, comenzar con la formulaci√≥n',
            'Necesito m√°s informaci√≥n sobre IDEC/IA'
        ],
        'next_step': 'handle_explanation_choice'
    },
    'idec_ia_info': {
        'prompt': '''üìö **Informaci√≥n sobre lineamientos IDEC e IA:**

**Plan Nacional de Infraestructura de Datos (PNID):**
- Marco estrat√©gico para la gesti√≥n de datos del Estado
- Enfoque en interoperabilidad, calidad y seguridad de datos
- Componentes: Gobernanza, arquitectura, est√°ndares y herramientas

**CONPES 4144 - Pol√≠tica Nacional de Inteligencia Artificial:**
- Estrategia nacional para adopci√≥n responsable de IA
- Pilares: Talento humano, investigaci√≥n, marco √©tico y regulatorio
- Sectores prioritarios: Salud, educaci√≥n, justicia, agricultura

**Componentes t√©cnicos clave para tu proyecto:**
‚Ä¢ Arquitectura de datos y sistemas
‚Ä¢ Modelos de IA y algoritmos
‚Ä¢ Interfaces y APIs
‚Ä¢ Seguridad y privacidad
‚Ä¢ Monitoreo y evaluaci√≥n

¬øEst√°s listo para iniciar la formulaci√≥n considerando estos lineamientos?''',
        'options': [
            'S√≠, iniciar formulaci√≥n con enfoque IDEC/IA',
            'Necesito m√°s detalles espec√≠ficos'
        ],
        'next_step': 'handle_info_choice'
    },
    'entidad_nombre': {
        'prompt': '''üèõÔ∏è **Informaci√≥n de la Entidad Ejecutora**

Comencemos identificando la entidad que ejecutar√° el proyecto.

Por favor, ingrese el **nombre completo de la entidad p√∫blica** que ser√° responsable de la ejecuci√≥n del proyecto:''',
        'next_step': 'entidad_sector'
    },
    'entidad_sector': {
        'prompt': '''üè¢ **Sector de la Entidad**

Por favor, especifique el **sector al que pertenece la entidad** (ejemplo: Salud, Educaci√≥n, Hacienda, Tecnolog√≠as de la Informaci√≥n, etc.):''',
        'next_step': 'tipo_proyecto'
    },
    'tipo_proyecto': {
        'prompt': '''üéØ **Tipo de Proyecto**

Para estructurar adecuadamente tu proyecto, necesito conocer el enfoque principal.

¬øTu proyecto se enfoca principalmente en:''',
        'options': [
            'Infraestructura de Datos (IDEC) - Gesti√≥n, interoperabilidad, calidad de datos',
            'Inteligencia Artificial - Modelos, algoritmos, automatizaci√≥n',
            'Proyecto h√≠brido - Combina elementos de IDEC e IA'
        ],
        'next_step': 'problema_identificacion'
    },
    'problema_identificacion': {
        'prompt': '''üéØ **Identificaci√≥n del Problema**

Ahora vamos a definir el problema que tu proyecto busca resolver. Esta es la base fundamental de toda la formulaci√≥n.

**Describe detalladamente el problema o necesidad** que el proyecto pretende atender:

- ¬øCu√°l es la situaci√≥n problem√°tica actual?
- ¬øC√≥mo se manifiesta este problema?
- ¬øQu√© evidencia tienes de que existe este problema?

(M√°ximo 800 caracteres)''',
        'next_step': 'causas_problema'
    },
    'causas_problema': {
        'prompt': '''üå≥ **An√°lisis de Causas**

Para construir el √°rbol de problemas, identifiquemos las causas que originan la problem√°tica.

**Lista las principales causas** que generan el problema identificado:

- Causas directas (que provocan inmediatamente el problema)
- Causas indirectas (que est√°n detr√°s de las causas directas)
- Considera aspectos t√©cnicos, organizacionales, normativos, de recursos, etc.

(M√°ximo 800 caracteres)''',
        'next_step': 'efectos_problema'
    },
    'efectos_problema': {
        'prompt': '''üìä **An√°lisis de Efectos**

Ahora identifiquemos los efectos o consecuencias que genera el problema.

**Describe los principales efectos** que produce la problem√°tica identificada:

- Efectos directos (consecuencias inmediatas del problema)
- Efectos indirectos (consecuencias de los efectos directos)
- Impactos en la poblaci√≥n, en la entidad, en otros sectores

(M√°ximo 800 caracteres)''',
        'next_step': 'poblacion_afectada'
    },
    'poblacion_afectada': {
        'prompt': '''üë• **Poblaci√≥n Afectada**

Identifiquemos qui√©nes se ven impactados por esta problem√°tica.

**Describe la poblaci√≥n afectada** por el problema:

- ¬øQui√©nes son los afectados? (ciudadanos, funcionarios, empresas, etc.)
- ¬øCu√°ntas personas aproximadamente?
- ¬øEn qu√© ubicaci√≥n geogr√°fica?
- ¬øQu√© caracter√≠sticas espec√≠ficas tienen?

(M√°ximo 600 caracteres)''',
        'next_step': 'objetivo_general'
    },
    'objetivo_general': {
        'prompt': '''üéØ **Objetivo General**

Con base en el problema identificado, definamos el objetivo principal del proyecto.

**Formula el objetivo general** que el proyecto pretende alcanzar:

- Debe ser claro, medible y alcanzable
- Debe responder directamente al problema identificado
- Utiliza verbos en infinitivo (mejorar, implementar, desarrollar, etc.)

(M√°ximo 400 caracteres)''',
        'next_step': 'objetivos_especificos'
    },
    'objetivos_especificos': {
        'prompt': '''üìã **Objetivos Espec√≠ficos**

Los objetivos espec√≠ficos detallan c√≥mo se lograr√° el objetivo general.

**Lista los objetivos espec√≠ficos** del proyecto:

- Deben ser concretos y medibles
- Cada uno debe contribuir al logro del objetivo general
- Considera aspectos t√©cnicos, de implementaci√≥n, de capacitaci√≥n, etc.

(M√°ximo 800 caracteres)''',
        'next_step': 'justificacion'
    },
    'justificacion': {
        'prompt': '''üìù **Justificaci√≥n del Proyecto**

Expliquemos por qu√© es importante ejecutar este proyecto.

**Proporciona la justificaci√≥n** del proyecto considerando:

- Importancia del problema para la entidad/sector
- Beneficios esperados de la soluci√≥n
- Alineaci√≥n con pol√≠ticas p√∫blicas (PNID, CONPES 4144, etc.)
- Urgencia de la intervenci√≥n

(M√°ximo 1000 caracteres)''',
        'next_step': 'localizacion'
    },
    'localizacion': {
        'prompt': '''üìç **Localizaci√≥n del Proyecto**

Definamos d√≥nde se ejecutar√° el proyecto.

**Describe la localizaci√≥n** del proyecto:

- Cobertura geogr√°fica (nacional, departamental, municipal, etc.)
- Ubicaciones espec√≠ficas donde se implementar√°
- Justificaci√≥n de la localizaci√≥n elegida

(M√°ximo 400 caracteres)''',
        'next_step': 'alternativas_solucion'
    },
    'alternativas_solucion': {
        'prompt': '''üí° **Alternativas de Soluci√≥n**

Identifiquemos las posibles alternativas para resolver el problema.

**Describe las alternativas de soluci√≥n** evaluadas:

- Alternativa 1: ¬øCu√°l ser√≠a?
- Alternativa 2: ¬øExiste otra opci√≥n?
- ¬øPor qu√© se selecciona una alternativa espec√≠fica?
- Considera aspectos t√©cnicos, de costos, de tiempo

(M√°ximo 800 caracteres)''',
        'next_step': 'componentes_tecnicos'
    },
    'componentes_tecnicos': {
        'prompt': '''‚öôÔ∏è **Componentes T√©cnicos**

Definamos los componentes t√©cnicos espec√≠ficos del proyecto IDEC/IA.

**Describe los componentes t√©cnicos principales**:

Para proyectos IDEC: Arquitectura de datos, APIs, est√°ndares, seguridad
Para proyectos IA: Modelos, algoritmos, datasets, infraestructura computacional
Para proyectos h√≠bridos: Combinaci√≥n de ambos

(M√°ximo 800 caracteres)''',
        'next_step': 'cadena_valor'
    },
    'cadena_valor': {
        'prompt': '''üîó **Cadena de Valor**

Describamos c√≥mo el proyecto genera valor desde los insumos hasta los impactos.

**Define la cadena de valor** del proyecto:

- **Insumos**: Recursos necesarios (humanos, t√©cnicos, financieros)
- **Actividades**: Qu√© se har√° espec√≠ficamente
- **Productos**: Qu√© se entregar√°
- **Resultados**: Cambios esperados en el corto plazo
- **Impactos**: Efectos de largo plazo

(M√°ximo 1000 caracteres)''',
        'next_step': 'indicadores'
    },
    'indicadores': {
        'prompt': '''üìä **Indicadores de Seguimiento**

Definamos c√≥mo mediremos el √©xito del proyecto.

**Propone indicadores** para medir:

- **Indicadores de producto**: ¬øQu√© entregas mediremos?
- **Indicadores de resultado**: ¬øQu√© cambios mediremos?
- **Indicadores de impacto**: ¬øQu√© efectos de largo plazo mediremos?

Para cada indicador incluye: nombre, unidad de medida, meta

(M√°ximo 800 caracteres)''',
        'next_step': 'riesgos'
    },
    'riesgos': {
        'prompt': '''‚ö†Ô∏è **An√°lisis de Riesgos**

Identifiquemos los principales riesgos que pueden afectar el proyecto.

**Lista y describe los riesgos identificados**:

- Riesgos t√©cnicos (tecnolog√≠a, implementaci√≥n)
- Riesgos de recursos (presupuesto, personal)
- Riesgos normativos (cambios regulatorios)
- Riesgos organizacionales (resistencia al cambio)

Para cada riesgo indica: probabilidad, impacto y medida de mitigaci√≥n

(M√°ximo 800 caracteres)''',
        'next_step': 'sostenibilidad'
    },
    'sostenibilidad': {
        'prompt': '''üå± **Estrategia de Sostenibilidad**

Definamos c√≥mo se mantendr√° el proyecto en el tiempo.

**Describe la estrategia de sostenibilidad**:

- **Sostenibilidad t√©cnica**: Mantenimiento, actualizaciones
- **Sostenibilidad financiera**: Fuentes de financiaci√≥n continua
- **Sostenibilidad institucional**: Capacidades, procesos
- **Sostenibilidad ambiental**: Impacto ecol√≥gico

(M√°ximo 800 caracteres)''',
        'next_step': 'presupuesto_general'
    },
    'presupuesto_general': {
        'prompt': '''üí∞ **Presupuesto General**

Estimemos el costo total del proyecto.

**Proporciona el presupuesto general**:

- Costo total estimado del proyecto
- Fuentes de financiaci√≥n (recursos propios, cr√©dito, cooperaci√≥n, etc.)
- Distribuci√≥n por a√±os (si aplica)
- Justificaci√≥n del monto estimado

(M√°ximo 600 caracteres)''',
        'next_step': 'presupuesto_detallado'
    },
    'presupuesto_detallado': {
        'prompt': '''üìã **Presupuesto Detallado**

Desglosa el presupuesto por componentes principales.

**Detalla el presupuesto por rubros**:

- Personal (salarios, honorarios)
- Tecnolog√≠a (hardware, software, licencias)
- Capacitaci√≥n y formaci√≥n
- Infraestructura
- Otros gastos operativos

(M√°ximo 800 caracteres)''',
        'next_step': 'cronograma'
    },
    'cronograma': {
        'prompt': '''üìÖ **Cronograma del Proyecto**

Definamos los tiempos de ejecuci√≥n del proyecto.

**Describe el cronograma general**:

- Duraci√≥n total del proyecto
- Fases principales y su duraci√≥n
- Hitos importantes y fechas clave
- Actividades cr√≠ticas que no pueden retrasarse

(M√°ximo 600 caracteres)''',
        'next_step': 'end'
    }
}

@app.route('/')
def index():
    # Inicializar la sesi√≥n
    session.clear()
    session['current_step'] = 'initial'
    session['responses'] = {}
    return render_template('index.html')

@app.route('/api/chat', methods=['POST'])
def chat():
    try:
        data = request.get_json()
        user_message = data.get('message', '').strip()
        current_step = session.get('current_step', 'initial')
        
        logger.debug(f"Paso actual: {current_step}, Mensaje: {user_message}")
        
        # Paso inicial - mostrar mensaje de bienvenida
        if current_step == 'initial':
            session['current_step'] = 'welcome_message'
            return jsonify({
                'response': conversation_flow['welcome_message']['prompt'],
                'current_step': 'welcome_message',
                'options': conversation_flow['welcome_message']['options']
            })

        # Manejar las opciones de bienvenida
        if current_step == 'welcome_message':
            return handle_welcome_choice(user_message)
        
        # Manejar la pregunta sobre el ciclo de inversi√≥n
        if current_step == 'cycle_question':
            return handle_cycle_choice(user_message)
        
        # Manejar despu√©s de la explicaci√≥n del ciclo
        if current_step == 'cycle_explanation':
            return handle_cycle_explanation_response(user_message)
        
        # Manejar opciones despu√©s de explicaci√≥n
        if current_step == 'brief_explanation':
            return handle_explanation_choice_response(user_message)
        
        # Manejar opciones despu√©s de informaci√≥n IDEC/IA
        if current_step == 'idec_ia_info':
            return handle_info_choice_response(user_message)

        # Para pasos con opciones m√∫ltiples
        if current_step in conversation_flow and 'options' in conversation_flow[current_step]:
            return handle_multiple_choice(current_step, user_message)

        # Almacenar la respuesta actual para pasos de texto libre
        session['responses'] = session.get('responses', {})
        session['responses'][current_step] = user_message

        # Obtener el siguiente paso
        if current_step in conversation_flow:
            next_step = conversation_flow[current_step]['next_step']
            session['current_step'] = next_step

            # Si es el paso final, generar el documento
            if next_step == 'end':
                try:
                    # Generar el documento usando el asistente
                    document_content = generate_document_with_assistant(session['responses'])
                    filename = save_document(document_content)
                    download_url = url_for('download_file', filename=filename)
                    
                    return jsonify({
                        'response': f'¬°Gracias por proporcionar toda la informaci√≥n! Su documento ha sido generado conforme a la metodolog√≠a MGA y lineamientos IDEC/IA. <a href="{download_url}" class="download-link">üìÑ Descargar Documento</a>',
                        'current_step': 'end',
                        'download_url': download_url
                    })
                except Exception as e:
                    logger.error(f"Error generando documento: {str(e)}")
                    return jsonify({
                        'response': 'Lo siento, ha ocurrido un error al generar el documento. Por favor, intente nuevamente.',
                        'current_step': 'end'
                    })

            # Continuar con el siguiente paso
            response_data = {
                'response': conversation_flow[next_step]['prompt'],
                'current_step': next_step
            }
            
            # Agregar opciones si las hay
            if 'options' in conversation_flow[next_step]:
                response_data['options'] = conversation_flow[next_step]['options']
            
            return jsonify(response_data)

        else:
            return jsonify({
                'response': 'Lo siento, ha ocurrido un error en el flujo de conversaci√≥n.',
                'current_step': 'end'
            })

    except Exception as e:
        logger.error(f"Error en chat: {str(e)}")
        return jsonify({
            'response': 'Lo siento, ha ocurrido un error inesperado. Por favor, intente nuevamente.',
            'current_step': 'end'
        })

def handle_welcome_choice(user_message):
    """Maneja la elecci√≥n de bienvenida del usuario"""
    user_message_lower = user_message.lower()
    
    if 'entiendo' in user_message_lower and 'continuar' in user_message_lower:
        # Usuario quiere continuar directamente - hacer la pregunta sobre el ciclo
        session['current_step'] = 'cycle_question'
        return jsonify({
            'response': conversation_flow['cycle_question']['prompt'],
            'current_step': 'cycle_question',
            'options': conversation_flow['cycle_question']['options']
        })
    elif 'breve explicaci√≥n' in user_message_lower or 'explicaci√≥n' in user_message_lower:
        # Usuario quiere explicaci√≥n
        session['current_step'] = 'brief_explanation'
        return jsonify({
            'response': conversation_flow['brief_explanation']['prompt'],
            'current_step': 'brief_explanation',
            'options': conversation_flow['brief_explanation']['options']
        })
    elif 'dudas puntuales' in user_message_lower or 'pnid' in user_message_lower or 'conpes' in user_message_lower:
        # Usuario quiere informaci√≥n sobre IDEC/IA
        session['current_step'] = 'idec_ia_info'
        return jsonify({
            'response': conversation_flow['idec_ia_info']['prompt'],
            'current_step': 'idec_ia_info',
            'options': conversation_flow['idec_ia_info']['options']
        })
    else:
        # Respuesta no reconocida, mostrar opciones nuevamente
        return jsonify({
            'response': 'Por favor, selecciona una de las opciones disponibles:',
            'current_step': 'welcome_message',
            'options': conversation_flow['welcome_message']['options']
        })

def handle_cycle_choice(user_message):
    """Maneja la respuesta sobre el conocimiento del ciclo de inversi√≥n"""
    user_message_lower = user_message.lower()
    
    if 's√≠' in user_message_lower or 'si' in user_message_lower or 'lo conozco' in user_message_lower:
        # Usuario conoce el ciclo, continuar directamente
        session['current_step'] = 'entidad_nombre'
        return jsonify({
            'response': conversation_flow['entidad_nombre']['prompt'],
            'current_step': 'entidad_nombre'
        })
    elif 'no' in user_message_lower or 'entenderlo mejor' in user_message_lower:
        # Usuario no conoce el ciclo, mostrar explicaci√≥n
        session['current_step'] = 'cycle_explanation'
        return jsonify({
            'response': conversation_flow['cycle_explanation']['prompt'],
            'current_step': 'cycle_explanation',
            'options': conversation_flow['cycle_explanation']['options']
        })
    else:
        # Respuesta no reconocida, mostrar opciones nuevamente
        return jsonify({
            'response': 'Por favor, selecciona una de las opciones disponibles:',
            'current_step': 'cycle_question',
            'options': conversation_flow['cycle_question']['options']
        })

def handle_cycle_explanation_response(user_message):
    """Maneja la respuesta despu√©s de la explicaci√≥n del ciclo"""
    user_message_lower = user_message.lower()
    
    if 's√≠' in user_message_lower or 'si' in user_message_lower or 'comenzar' in user_message_lower:
        # Usuario quiere comenzar la formulaci√≥n
        session['current_step'] = 'entidad_nombre'
        return jsonify({
            'response': conversation_flow['entidad_nombre']['prompt'],
            'current_step': 'entidad_nombre'
        })
    else:
        # Respuesta no reconocida, mostrar opciones nuevamente
        return jsonify({
            'response': 'Por favor, selecciona una de las opciones disponibles:',
            'current_step': 'cycle_explanation',
            'options': conversation_flow['cycle_explanation']['options']
        })

def handle_explanation_choice_response(user_message):
    """Maneja la respuesta despu√©s de la explicaci√≥n"""
    user_message_lower = user_message.lower()
    
    if 'comenzar' in user_message_lower or 'formulaci√≥n' in user_message_lower:
        # Despu√©s de la explicaci√≥n, hacer la pregunta sobre el ciclo
        session['current_step'] = 'cycle_question'
        return jsonify({
            'response': conversation_flow['cycle_question']['prompt'],
            'current_step': 'cycle_question',
            'options': conversation_flow['cycle_question']['options']
        })
    elif 'm√°s informaci√≥n' in user_message_lower or 'idec' in user_message_lower:
        session['current_step'] = 'idec_ia_info'
        return jsonify({
            'response': conversation_flow['idec_ia_info']['prompt'],
            'current_step': 'idec_ia_info',
            'options': conversation_flow['idec_ia_info']['options']
        })
    else:
        return jsonify({
            'response': 'Por favor, selecciona una de las opciones disponibles:',
            'current_step': 'brief_explanation',
            'options': conversation_flow['brief_explanation']['options']
        })

def handle_info_choice_response(user_message):
    """Maneja la respuesta despu√©s de la informaci√≥n IDEC/IA"""
    user_message_lower = user_message.lower()
    
    if 'iniciar' in user_message_lower or 'formulaci√≥n' in user_message_lower:
        # Despu√©s de la informaci√≥n IDEC/IA, hacer la pregunta sobre el ciclo
        session['current_step'] = 'cycle_question'
        return jsonify({
            'response': conversation_flow['cycle_question']['prompt'],
            'current_step': 'cycle_question',
            'options': conversation_flow['cycle_question']['options']
        })
    else:
        return jsonify({
            'response': 'Por favor, selecciona una de las opciones disponibles:',
            'current_step': 'idec_ia_info',
            'options': conversation_flow['idec_ia_info']['options']
        })

def handle_multiple_choice(current_step, user_message):
    """Maneja pasos con opciones m√∫ltiples"""
    # Almacenar la respuesta
    session['responses'] = session.get('responses', {})
    session['responses'][current_step] = user_message
    
    # Continuar al siguiente paso
    next_step = conversation_flow[current_step]['next_step']
    session['current_step'] = next_step
    
    response_data = {
        'response': conversation_flow[next_step]['prompt'],
        'current_step': next_step
    }
    
    # Agregar opciones si las hay
    if 'options' in conversation_flow[next_step]:
        response_data['options'] = conversation_flow[next_step]['options']
    
    return jsonify(response_data)

def generate_document_with_assistant(responses):
    """Genera el documento usando tu asistente existente de Azure OpenAI"""
    try:
        logger.info(f"Usando asistente con ID: {ASSISTANT_ID}")
        
        # Crear un thread para esta conversaci√≥n
        thread = client.beta.threads.create()
        
        # Crear el mensaje con toda la informaci√≥n del proyecto
        message_content = f"""
        Por favor, genera un documento completo de proyecto de inversi√≥n conforme a la Metodolog√≠a General Ajustada (MGA) y lineamientos IDEC/IA basado en la siguiente informaci√≥n:

        INFORMACI√ìN DE LA ENTIDAD:
        - Entidad Ejecutora: {responses.get('entidad_nombre', '')}
        - Sector: {responses.get('entidad_sector', '')}
        - Tipo de Proyecto: {responses.get('tipo_proyecto', '')}

        IDENTIFICACI√ìN Y PREPARACI√ìN DEL PROYECTO:
        - Problema Identificado: {responses.get('problema_identificacion', '')}
        - An√°lisis de Causas: {responses.get('causas_problema', '')}
        - An√°lisis de Efectos: {responses.get('efectos_problema', '')}
        - Poblaci√≥n Afectada: {responses.get('poblacion_afectada', '')}

        FORMULACI√ìN DEL PROYECTO:
        - Objetivo General: {responses.get('objetivo_general', '')}
        - Objetivos Espec√≠ficos: {responses.get('objetivos_especificos', '')}
        - Justificaci√≥n: {responses.get('justificacion', '')}
        - Localizaci√≥n: {responses.get('localizacion', '')}
        - Alternativas de Soluci√≥n: {responses.get('alternativas_solucion', '')}

        COMPONENTES T√âCNICOS:
        - Componentes T√©cnicos: {responses.get('componentes_tecnicos', '')}
        - Cadena de Valor: {responses.get('cadena_valor', '')}
        - Indicadores: {responses.get('indicadores', '')}

        EVALUACI√ìN Y SOSTENIBILIDAD:
        - An√°lisis de Riesgos: {responses.get('riesgos', '')}
        - Estrategia de Sostenibilidad: {responses.get('sostenibilidad', '')}

        ASPECTOS FINANCIEROS Y CRONOGRAMA:
        - Presupuesto General: {responses.get('presupuesto_general', '')}
        - Presupuesto Detallado: {responses.get('presupuesto_detallado', '')}
        - Cronograma: {responses.get('cronograma', '')}

        Por favor, estructura el documento con las siguientes secciones principales:
        1. Resumen Ejecutivo
        2. Identificaci√≥n del Problema (√Årbol de Problemas)
        3. Objetivos del Proyecto (√Årbol de Objetivos)
        4. Justificaci√≥n y Marco de Referencia
        5. Descripci√≥n del Proyecto y Alternativas
        6. Componentes T√©cnicos IDEC/IA
        7. Cadena de Valor e Indicadores
        8. An√°lisis de Riesgos y Sostenibilidad
        9. Presupuesto y Cronograma
        10. Conclusiones y Recomendaciones
        """
        
        # Agregar el mensaje al thread
        message = client.beta.threads.messages.create(
            thread_id=thread.id,
            role="user",
            content=message_content
        )
        
        # Ejecutar el asistente
        run = client.beta.threads.runs.create(
            thread_id=thread.id,
            assistant_id=ASSISTANT_ID
        )
        
        # Esperar a que el asistente termine de procesar
        max_attempts = 60  # M√°ximo 60 segundos
        attempts = 0
        
        while attempts < max_attempts:
            run_status = client.beta.threads.runs.retrieve(
                thread_id=thread.id,
                run_id=run.id
            )
            
            logger.info(f"Estado del asistente: {run_status.status}")
            
            if run_status.status == 'completed':
                break
            elif run_status.status == 'failed':
                raise Exception(f"El asistente fall√≥: {run_status.last_error}")
            elif run_status.status == 'expired':
                raise Exception("El asistente expir√≥")
            elif run_status.status == 'cancelled':
                raise Exception("El asistente fue cancelado")
            
            time.sleep(1)  # Esperar 1 segundo antes de verificar nuevamente
            attempts += 1
        
        if attempts >= max_attempts:
            raise Exception("Timeout: El asistente tard√≥ demasiado en responder")
        
        # Obtener la respuesta del asistente
        messages = client.beta.threads.messages.list(thread_id=thread.id)
        
        # La respuesta m√°s reciente ser√° la del asistente
        assistant_message = None
        for msg in messages.data:
            if msg.role == "assistant":
                assistant_message = msg
                break
        
        if not assistant_message:
            raise Exception("No se recibi√≥ respuesta del asistente")
        
        # Extraer el contenido del mensaje
        content = ""
        if assistant_message.content and len(assistant_message.content) > 0:
            content = assistant_message.content[0].text.value
        
        if not content:
            raise Exception("El asistente devolvi√≥ un contenido vac√≠o")
        
        logger.info("Documento generado exitosamente por el asistente")
        return content

    except Exception as e:
        logger.error(f"Error generando documento con asistente: {str(e)}")
        # Intentar con fallback si el asistente falla
        logger.info("Intentando usar fallback con chat completions")
        return generate_document_with_fallback(responses)

def generate_document_with_fallback(responses):
    """Funci√≥n de fallback usando chat completions directas"""
    try:
        # Crear el prompt para ChatGPT
        prompt = f"""
        Por favor, genera un documento de proyecto de inversi√≥n basado en la siguiente informaci√≥n:

        Entidad: {responses.get('entidad_nombre', '')}
        Sector: {responses.get('entidad_sector', '')}
        Componentes IDEC: {responses.get('componentes_idec', '')}
        Problem√°tica: {responses.get('problema_descripcion', '')}
        Situaci√≥n Actual: {responses.get('situacion_actual', '')}
        Causas y Efectos: {responses.get('causas_efectos', '')}
        Poblaci√≥n Afectada: {responses.get('poblacion_afectada', '')}
        Objetivo General: {responses.get('objetivo_general', '')}
        Objetivos Espec√≠ficos: {responses.get('objetivos_especificos', '')}
        Localizaci√≥n: {responses.get('localizacion', '')}
        Cadena de Valor: {responses.get('cadena_valor', '')}
        Riesgos: {responses.get('riesgos', '')}
        Sostenibilidad: {responses.get('sostenibilidad', '')}
        Presupuesto General: {responses.get('presupuesto_general', '')}
        Presupuesto Detalle: {responses.get('presupuesto_detalle', '')}

        Por favor, genera un documento profesional y bien estructurado que incluya:
        1. Resumen ejecutivo
        2. Informaci√≥n de la entidad
        3. Descripci√≥n del problema y situaci√≥n actual
        4. Objetivos y poblaci√≥n objetivo
        5. Localizaci√≥n y cadena de valor
        6. An√°lisis de riesgos
        7. Estrategia de sostenibilidad
        8. Presupuesto y detalles financieros
        """

        # Llamar a la API de Azure OpenAI usando chat completions
        response = client.chat.completions.create(
            model=os.getenv('OPENAI_DEPLOYMENT_NAME', 'gpt-4o-mini'),
            messages=[
                {"role": "system", "content": "Eres un experto en redacci√≥n de proyectos de inversi√≥n."},
                {"role": "user", "content": prompt}
            ]
        )

        return response.choices[0].message.content

    except Exception as e:
        logger.error(f"Error generando documento con fallback: {str(e)}")
        raise

def save_document(content):
    try:
        # Crear un nuevo documento
        doc = Document()
        
        # Agregar t√≠tulo
        title = doc.add_heading('Propuesta de Proyecto de Inversi√≥n', 0)
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Agregar contenido
        doc.add_paragraph(content)
        
        # Guardar el documento
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f'proyecto_inversion_{timestamp}.docx'
        filepath = os.path.join(DOCUMENTS_DIR, filename)
        doc.save(filepath)
        
        return filename

    except Exception as e:
        logger.error(f"Error guardando documento: {str(e)}")
        raise

@app.route('/download/<path:filename>')
def download_file(filename):
    try:
        return send_from_directory(DOCUMENTS_DIR, filename, as_attachment=True)
    except Exception as e:
        logger.error(f"Error descargando archivo: {str(e)}")
        return "Error al descargar el archivo", 404

@app.route('/config.json')
def serve_config():
    try:
        config_path = os.path.join(app.static_folder, 'config.json')
        return send_from_directory(app.static_folder, 'config.json')
    except Exception as e:
        logger.error(f"Error sirviendo config.json: {str(e)}")
        return jsonify({'error': 'Configuraci√≥n no disponible'}), 404

# Generar archivo de configuraci√≥n para GitHub Pages
def generate_github_pages_config():
    config = {
        'conversation_flow': conversation_flow,
        'api_endpoint': '/api/chat',
        'version': '2.0',
        'description': 'Asistente para formulaci√≥n de proyectos de inversi√≥n MGA/IDEC/IA'
    }
    
    # Crear el archivo en la carpeta static del directorio actual
    config_path = os.path.join(app.static_folder, 'config.json')
    with open(config_path, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)

if __name__ == '__main__':
    generate_github_pages_config()
    app.run(host='0.0.0.0', port=5001, debug=True) 